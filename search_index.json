[
["index.html", "Subsetting PyRanges 1 Introduction to PyRanges", " Subsetting PyRanges Endre Bakken Stovner 2022-01-11 1 Introduction to PyRanges This is the PyRanges’ tutorial. For docs, see: https://pyranges.readthedocs.io/en/latest/ PyRanges are collections of intervals that support comparison operations (like overlap and intersect) and other methods that are useful for genomic analyses. The ranges can have an arbitrary number of meta-data fields, i.e. columns associated with them. The data in PyRanges objects are stored in a pandas dataframe. This means the vast Python ecosystem for high-performance scientific computing is available to manipulate the data in PyRanges-objects. import pyranges as pr from pyranges import PyRanges import pandas as pd from io import StringIO f1 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 4 7 23.8 + chr1 6 11 0.13 - chr2 0 14 42.42 +&quot;&quot;&quot; df1 = pd.read_csv(StringIO(f1), sep=&quot;\\s+&quot;) gr1 = PyRanges(df1) Now we can subset the PyRange in various ways: print(gr1) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 4 | 7 | 23.8 | + | ## | chr1 | 6 | 11 | 0.13 | - | ## | chr2 | 0 | 14 | 42.42 | + | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 3 rows and 5 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr1[&quot;chr1&quot;, 0:5]) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 4 | 7 | 23.8 | + | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 1 rows and 5 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr1[&quot;chr1&quot;, &quot;-&quot;, 6:100]) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 6 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 1 rows and 5 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr1.Score) ## 0 23.80 ## 1 0.13 ## 2 42.42 ## Name: Score, dtype: float64 And we can perform comparison operations with two PyRanges: f2 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 5 6 -0.01 - chr1 9 12 200 + chr3 0 14 21.21 -&quot;&quot;&quot; df2 = pd.read_csv(StringIO(f2), sep=&quot;\\s+&quot;) gr2 = PyRanges(df2) print(gr2) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 9 | 12 | 200 | + | ## | chr1 | 5 | 6 | -0.01 | - | ## | chr3 | 0 | 14 | 21.21 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 3 rows and 5 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr1.intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 2 rows and 5 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr1.intersect(gr2, strandedness=False)) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 2 rows and 5 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. There are also convenience methods for single PyRanges: print(gr1.merge()) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 4 | 7 | + | ## | chr1 | 6 | 11 | - | ## | chr2 | 0 | 14 | + | ## +--------------+-----------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 4 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. The underlying dataframe can always be accessed: print(gr1.df) ## Chromosome Start End Score Strand ## 0 chr1 4 7 23.80 + ## 1 chr1 6 11 0.13 - ## 2 chr2 0 14 42.42 + "],
["loadingcreating-pyranges.html", "2 Loading/Creating PyRanges", " 2 Loading/Creating PyRanges A PyRanges object can be built in four ways: from a Pandas dataframe using the PyRanges constructor with the chromosomes, starts and ends (and optionally strands), individually. using one of the custom reader functions for genomic data (read_bed, read_bam or read_gtf, read_gff3) from a dict (like the ones produced with to_example) Using a DataFrame If you instantiate a PyRanges object from a dataframe, the dataframe should at least contain the columns Chromosome, Start and End. A column called Strand is optional. Any other columns in the dataframe are treated as metadata. import pandas as pd import pyranges as pr chipseq = pr.get_example_path(&quot;chipseq.bed&quot;) df = pd.read_csv(chipseq, header=None, names=&quot;Chromosome Start End Name Score Strand&quot;.split(), sep=&quot;\\t&quot;) print(df.head(2)) ## Chromosome Start End Name Score Strand ## 0 chr8 28510032 28510057 U0 0 - ## 1 chr7 107153363 107153388 U0 0 - print(df.tail(2)) ## Chromosome Start End Name Score Strand ## 9998 chr1 194245558 194245583 U0 0 + ## 9999 chr8 57916061 57916086 U0 0 + print(pr.PyRanges(df)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Using constructor keywords The other way to instantiate a PyRanges object is to use the constructor with keywords: gr = pr.PyRanges(chromosomes=df.Chromosome, starts=df.Start, ends=df.End) print(gr) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 100079649 | 100079674 | ## | chr1 | 212609534 | 212609559 | ## | chr1 | 223587418 | 223587443 | ## | chr1 | 202450161 | 202450186 | ## | ... | ... | ... | ## | chrY | 11942770 | 11942795 | ## | chrY | 8316773 | 8316798 | ## | chrY | 7463444 | 7463469 | ## | chrY | 7405376 | 7405401 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 10,000 rows and 3 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. It is possible to make PyRanges objects out of basic Python datatypes: gr = pr.PyRanges(chromosomes=&quot;chr1&quot;, strands=&quot;+&quot;, starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 0 | 3 | + | ## | chr1 | 1 | 4 | + | ## | chr1 | 2 | 5 | + | ## +--------------+-----------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 4 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. gr = pr.PyRanges(chromosomes=&quot;chr1 chr2 chr3&quot;.split(), strands=&quot;+ - +&quot;.split(), starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 0 | 3 | + | ## | chr2 | 1 | 4 | - | ## | chr3 | 2 | 5 | + | ## +--------------+-----------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 4 columns from 3 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Using read_bed, read_gtf, read_gff3 or read_bam The pyranges library can create PyRanges from gff3 common file formats, namely gtf/gff, gff3, bed and bam ^. ensembl_path = pr.get_example_path(&quot;ensembl.gtf&quot;) gr = pr.read_gtf(ensembl_path) print(gr) ## +--------------+------------+--------------+-----------+-----------+-------+ ## | Chromosome | Source | Feature | Start | End | +21 | ## | (category) | (object) | (category) | (int32) | (int32) | ... | ## |--------------+------------+--------------+-----------+-----------+-------| ## | 1 | havana | gene | 11868 | 14409 | ... | ## | 1 | havana | transcript | 11868 | 14409 | ... | ## | 1 | havana | exon | 11868 | 12227 | ... | ## | 1 | havana | exon | 12612 | 12721 | ... | ## | ... | ... | ... | ... | ... | ... | ## | 1 | ensembl | transcript | 120724 | 133723 | ... | ## | 1 | ensembl | exon | 133373 | 133723 | ... | ## | 1 | ensembl | exon | 129054 | 129223 | ... | ## | 1 | ensembl | exon | 120873 | 120932 | ... | ## +--------------+------------+--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 95 rows and 26 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 21 hidden columns: Score, Strand, Frame, gene_id, gene_version, gene_name, gene_source, ... (+ 14 more.) To read bam files the optional bamread-library must be installed. Use conda install -c bioconda bamread or pip install bamread to install it. read_bam takes the arguments sparse, mapq, required_flag, filter_flag, which have the default values True, 0, 0 and 1540, respectively. With sparse True, only the columns ['Chromosome', 'Start', 'End', 'Strand', 'Flag'] are fetched. Setting sparse to False additionally gives you the columns ['QueryStart', 'QueryEnd', 'Name', 'Cigar', 'Quality'], but is more time and memory-consuming. All the reader functions also take the flag as_df 2.0.0.1 Using from_dict f1 = pr.data.f1() d = f1.to_example(n=10) print(d) ## {&#39;Chromosome&#39;: [&#39;chr1&#39;, &#39;chr1&#39;, &#39;chr1&#39;], &#39;Start&#39;: [3, 8, 5], &#39;End&#39;: [6, 9, 7], &#39;Name&#39;: [&#39;interval1&#39;, &#39;interval3&#39;, &#39;interval2&#39;], &#39;Score&#39;: [0, 0, 0], &#39;Strand&#39;: [&#39;+&#39;, &#39;+&#39;, &#39;-&#39;]} print(pr.from_dict(d)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. "],
["writing-pyranges-to-disk.html", "3 Writing PyRanges to disk", " 3 Writing PyRanges to disk The PyRanges can be written to several formats, namely csv, gtf, gff3 and bigwig. If no path-argument is given, the string representation of the data is returned. (It may potentially be very large.) If a path is given, the return value is the object itself. This way the write methods can easily be inserted in method call chains. import pyranges as pr # import pyranges_db as pr_db gr = pr.data.chipseq() gr.to_gtf(&quot;chipseq.gtf&quot;) print(gr[:10000].to_gtf()) print(gr[:10000].to_gff3()) The to_csv method takes the arguments header and sep. gr.to_csv(&quot;chipseq.csv&quot;, sep=&quot;\\t&quot;, header=True) print(gr[:10000].to_csv(sep=&quot;|&quot;, header=True)) All to-methods except to_bigwig takes an argument chain which can be set to True if you want the method to return the PyRanges it wrote. It is useful for storing the intermediate results of long call chains. pr.data().f1().to_csv(\"bla\", chain=True).merge()... The pyranges library can also create bigwigs, but it needs the library pybigwig which is not installed by default. Use conda install -c bioconda pybigwig or pip install pybigwig to install it. The bigwig writer needs to know the chromosome sizes. You can fetch these using the pyranges database functions. chromsizes = pr.data.chromsizes() # hg19, can also use pr_db.ucsc.chromosome_sizes(&quot;hg19&quot;) gr.to_bigwig(&quot;chipseq.bw&quot;, chromsizes) To create a bigwig from an arbitrary value column, use the value_col argument. If you want to write one bigwig for each strand, you need to do it manually. gr[&quot;+&quot;].to_bigwig(&quot;chipseq_plus.bw&quot;, chromsizes) gr[&quot;-&quot;].to_bigwig(&quot;chipseq_minus.bw&quot;, chromsizes) to_bigwig also takes a flag divide_by which takes another PyRanges. Using divide_by creates a log2-normalized bigwig. "],
["subsetting-pyranges.html", "4 Subsetting PyRanges", " 4 Subsetting PyRanges There are many ways to subset a PyRanges object. Each returns a new PyRanges object and does not change the old one. For data exploration, the functions head, tail and sample (random choice without replacment) are convenient. They take an argument n to denote how many entries you want. import pyranges as pr gr = pr.data.chipseq() print(gr.sample()) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr2 | 76001210 | 76001235 | U0 | 0 | - | ## | chr4 | 167248385 | 167248410 | U0 | 0 | + | ## | chr5 | 167939402 | 167939427 | U0 | 0 | + | ## | chr6 | 42293368 | 42293393 | U0 | 0 | + | ## | chr12 | 5655651 | 5655676 | U0 | 0 | + | ## | chr13 | 103974200 | 103974225 | U0 | 0 | + | ## | chr14 | 34997840 | 34997865 | U0 | 0 | + | ## | chrX | 28519432 | 28519457 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 8 rows and 6 columns from 8 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr.tail(4)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 4 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. By subsetting with a list you can select one or more columns: import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr[[&quot;Name&quot;]]) ## +--------------+-----------+-----------+------------+--------------+ ## | Chromosome | Start | End | Name | Strand | ## | (category) | (int32) | (int32) | (object) | (category) | ## |--------------+-----------+-----------+------------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | + | ## | chr1 | 169887529 | 169887554 | U0 | + | ## | chr1 | 216711011 | 216711036 | U0 | + | ## | chr1 | 144227079 | 144227104 | U0 | + | ## | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | - | ## | chrY | 13517892 | 13517917 | U0 | - | ## | chrY | 8010951 | 8010976 | U0 | - | ## | chrY | 7405376 | 7405401 | U0 | - | ## +--------------+-----------+-----------+------------+--------------+ ## Stranded PyRanges object has 10,000 rows and 5 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. By subsetting using a boolean vector, you can get specific rows: import pyranges as pr cpg = pr.data.cpg() print(cpg[cpg.CpG &gt; 50]) ## +--------------+-----------+-----------+-----------+ ## | Chromosome | Start | End | CpG | ## | (category) | (int32) | (int32) | (int64) | ## |--------------+-----------+-----------+-----------| ## | chrX | 64181 | 64793 | 62 | ## | chrX | 69133 | 70029 | 100 | ## | chrX | 148685 | 149461 | 85 | ## | chrX | 166504 | 167721 | 96 | ## | ... | ... | ... | ... | ## | chrY | 21154603 | 21155040 | 61 | ## | chrY | 21238448 | 21240005 | 133 | ## | chrY | 26351343 | 26352316 | 76 | ## | chrY | 27610115 | 27611088 | 76 | ## +--------------+-----------+-----------+-----------+ ## Unstranded PyRanges object has 530 rows and 4 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. By using strings, tuples and slices, you can subset the PyRanges based on position: Chromosome only print(gr[&quot;chrX&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 13843759 | 13843784 | U0 | 0 | + | ## | chrX | 114673546 | 114673571 | U0 | 0 | + | ## | chrX | 131816774 | 131816799 | U0 | 0 | + | ## | chrX | 45504745 | 45504770 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 146694149 | 146694174 | U0 | 0 | - | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 282 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Chromosome and Strand print(gr[&quot;chrX&quot;, &quot;-&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 41852946 | 41852971 | U0 | 0 | - | ## | chrX | 69979838 | 69979863 | U0 | 0 | - | ## | chrX | 34824145 | 34824170 | U0 | 0 | - | ## | chrX | 132354117 | 132354142 | U0 | 0 | - | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 146694149 | 146694174 | U0 | 0 | - | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 151 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Chromosome and Slice print(gr[&quot;chrX&quot;, 150000000:160000000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 151324943 | 151324968 | U0 | 0 | + | ## | chrX | 152902449 | 152902474 | U0 | 0 | + | ## | chrX | 153632850 | 153632875 | U0 | 0 | + | ## | chrX | 153874106 | 153874131 | U0 | 0 | + | ## | chrX | 150277236 | 150277261 | U0 | 0 | - | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## | chrX | 153255924 | 153255949 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 8 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Chromosome, Strand and Slice print(gr[&quot;chrX&quot;, &quot;-&quot;, 150000000:160000000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 150277236 | 150277261 | U0 | 0 | - | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## | chrX | 153255924 | 153255949 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 4 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Slice Only using slices returns all ranges from all chromosomes and strands within those coordinates. print(gr[0:100000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr2 | 13611 | 13636 | U0 | 0 | - | ## | chr2 | 32620 | 32645 | U0 | 0 | - | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## | chr4 | 45413 | 45438 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 5 rows and 6 columns from 3 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Note that while the slice-operator is fast and returns seemingly immediately, it is inefficient; it builds the interval overlap datastructure anew every query. So if you have multiple queries you should build another PyRanges and do an intersect-operation. Strand print(gr[&quot;+&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21559181 | 21559206 | U0 | 0 | + | ## | chrY | 11942770 | 11942795 | U0 | 0 | + | ## | chrY | 8316773 | 8316798 | U0 | 0 | + | ## | chrY | 7463444 | 7463469 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 5,050 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Slice and Strand print(gr[&quot;+&quot;, 0:100000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. "],
["manipulating-the-data-in-pyranges.html", "5 Manipulating the data in PyRanges", " 5 Manipulating the data in PyRanges PyRanges is a thin wrapper around genomic data contained in pandas dataframes. This dataframe is accessible with the df attribute of the PyRanges object. import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr.df.head(5)) ## Chromosome Start End Name Score Strand ## 0 chr1 212609534 212609559 U0 0 + ## 1 chr1 169887529 169887554 U0 0 + ## 2 chr1 216711011 216711036 U0 0 + ## 3 chr1 144227079 144227104 U0 0 + ## 4 chr1 148177825 148177850 U0 0 + To access a column of this dataframe, you can ask for the name directly from the PyRanges object. print(gr.Start.head()) ## 18 212609534 ## 70 169887529 ## 129 216711011 ## 170 144227079 ## 196 148177825 ## Name: Start, dtype: int32 You can directly insert a column by setting the attribute on the PyRanges object: gr.stupid_example = &quot;Hi There!&quot; print(gr) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +2 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | ... | ## | chr1 | 169887529 | 169887554 | U0 | 0 | ... | ## | chr1 | 216711011 | 216711036 | U0 | 0 | ... | ## | chr1 | 144227079 | 144227104 | U0 | 0 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | ... | ## | chrY | 8010951 | 8010976 | U0 | 0 | ... | ## | chrY | 7405376 | 7405401 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 10,000 rows and 7 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 2 hidden columns: Strand, stupid_example gr = gr.drop(&quot;stupid_example&quot;) print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. And as you can see, you can drop columns from the PyRanges using drop. Using drop by itself removes all metadata-columns. To insert a dataframe into a PyRanges object, you can use insert. Insert supports an optional insertion index loc: df = pd.DataFrame({&quot;A1&quot;: [1, 2] * 5000, &quot;A2&quot;: [3, 4, 5, 6] * 2500}) print(df.head()) ## A1 A2 ## 0 1 3 ## 1 2 4 ## 2 1 5 ## 3 2 6 ## 4 1 3 print(gr.insert(df)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +3 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | ... | ## | chr1 | 169887529 | 169887554 | U0 | 0 | ... | ## | chr1 | 216711011 | 216711036 | U0 | 0 | ... | ## | chr1 | 144227079 | 144227104 | U0 | 0 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | ... | ## | chrY | 8010951 | 8010976 | U0 | 0 | ... | ## | chrY | 7405376 | 7405401 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 10,000 rows and 8 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Strand, A1, A2 print(gr.insert(df, loc=3)) ## +--------------+-----------+-----------+-----------+-----------+-------+ ## | Chromosome | Start | End | A1 | A2 | +3 | ## | (category) | (int32) | (int32) | (int64) | (int64) | ... | ## |--------------+-----------+-----------+-----------+-----------+-------| ## | chr1 | 212609534 | 212609559 | 1 | 3 | ... | ## | chr1 | 169887529 | 169887554 | 2 | 4 | ... | ## | chr1 | 216711011 | 216711036 | 1 | 5 | ... | ## | chr1 | 144227079 | 144227104 | 2 | 6 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | 1 | 3 | ... | ## | chrY | 13517892 | 13517917 | 2 | 4 | ... | ## | chrY | 8010951 | 8010976 | 1 | 5 | ... | ## | chrY | 7405376 | 7405401 | 2 | 6 | ... | ## +--------------+-----------+-----------+-----------+-----------+-------+ ## Stranded PyRanges object has 10,000 rows and 8 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Name, Score, Strand To rename the columns you can use the set_columns() method. If you want to remove duplicates based on position, you can use drop_duplicate_positions: print(gr.drop_duplicate_positions(strand=False)) # defaults to True ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 9,924 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. All columns, including Chromosome, Start, End and Strand can be changed in any way you please and more metadata-columns can be added by setting it on the PyRanges object. import pandas as pd gr.Name = gr.Chromosome.astype(str) + &quot;_&quot; + pd.Series(range(len(gr)), index=gr.Chromosome.index).astype(str) print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | chr1_0 | 0 | + | ## | chr1 | 169887529 | 169887554 | chr1_1 | 0 | + | ## | chr1 | 216711011 | 216711036 | chr1_2 | 0 | + | ## | chr1 | 144227079 | 144227104 | chr1_3 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | chrY_9996 | 0 | - | ## | chrY | 13517892 | 13517917 | chrY_9997 | 0 | - | ## | chrY | 8010951 | 8010976 | chrY_9998 | 0 | - | ## | chrY | 7405376 | 7405401 | chrY_9999 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. gr.Strand = &quot;.&quot; print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | chr1_0 | 0 | . | ## | chr1 | 169887529 | 169887554 | chr1_1 | 0 | . | ## | chr1 | 216711011 | 216711036 | chr1_2 | 0 | . | ## | chr1 | 144227079 | 144227104 | chr1_3 | 0 | . | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | chrY_9996 | 0 | . | ## | chrY | 13517892 | 13517917 | chrY_9997 | 0 | . | ## | chrY | 8010951 | 8010976 | chrY_9998 | 0 | . | ## | chrY | 7405376 | 7405401 | chrY_9999 | 0 | . | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Unstranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. ## Considered unstranded due to these Strand values: &#39;.&#39; "],
["concatenating-pyranges.html", "6 Concatenating PyRanges", " 6 Concatenating PyRanges A list of PyRanges can be concatenated by using the concat function: import pyranges as pr import pandas as pd gr1 = pr.data.f1() gr2 = pr.data.f2() print(gr1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr2) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. concatted = pr.concat([gr1, gr2, gr1]) print(concatted) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## | chr1 | 6 | 7 | b | 0 | - | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 8 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. "],
["piping-pyranges.html", "7 Piping PyRanges", " 7 Piping PyRanges The PyRanges API supports chaining operations out of the box. To set a new column in a PyRanges you would use the assign method and for subsetting you would use the subset method. import pyranges as pr import pandas as pd exons = pr.data.exons() cpg = pr.data.cpg() cpg.join(exons.unstrand()).subset(lambda df: df.CpG &gt; 25)[[&quot;CpG&quot;]].assign(&quot;CpGDecile&quot;, lambda df: df.CpG % 10)[&quot;chrX&quot;].slack(500) "],
["printing-pyranges.html", "8 Printing PyRanges", " 8 Printing PyRanges There are 10 helper methods for printing PyRanges. These are p/print (regular print), mp (merged position print), sp (sorted print), msp (merged position sorted print) and rp (raw print). Merged means that the information about Chromosome, Start, End and Strand (if applicable) are merged into one column for printing. Sorted means that the output is sorted on position and Strand. Regular print shows the + strand first and - strand second, so if you want to display interleaved intervals from both strands, sorted print is the way to do it. Raw print (rp) just prints the underlying dict of dataframes. All print methods except rp take an n-argument to control how many entries should be displayed. The pc, mpc, spc, mspc and rpc also return the pyranges so that print methods can be used to display intermediate results in pipes. import pyranges as pr exons = pr.data.exons() exons.pc(n=2).mpc(n=8).sp() ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +3 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 135721701 | 135721963 | ... | ## | ... | ... | ... | ... | ## | chrY | 15467254 | 15467278 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Name, Score, Strand ## +----------------------------+----------------------------------------+-----------+ ## | - Position - | Name | Score | ## | (Multiple types) | (object) | (int64) | ## |----------------------------+----------------------------------------+-----------| ## | chrX 135721701-135721963 + | NR_038462_exon_0_0_chrX_135721702_f | 0 | ## | chrX 135574120-135574598 + | NM_001727_exon_2_0_chrX_135574121_f | 0 | ## | chrX 47868945-47869126 + | NM_205856_exon_4_0_chrX_47868946_f | 0 | ## | chrX 77294333-77294480 + | NM_000052_exon_17_0_chrX_77294334_f | 0 | ## | ... | ... | ... | ## | chrY 15409586-15409728 - | NR_047633_exon_3_0_chrY_15409587_r | 0 | ## | chrY 15478146-15478273 - | NR_047634_exon_18_0_chrY_15478147_r | 0 | ## | chrY 15360258-15361762 - | NR_047601_exon_0_0_chrY_15360259_r | 0 | ## | chrY 15467254-15467278 - | NM_001258270_exon_13_0_chrY_15467255_r | 0 | ## +----------------------------+----------------------------------------+-----------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +3 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 585078 | 585337 | ... | ## | chrX | 1393647 | 1393735 | ... | ## | chrX | 1393647 | 1393735 | ... | ## | chrX | 1404670 | 1404813 | ... | ## | chrX | 1407411 | 1407535 | ... | ## | chrX | 1407651 | 1407781 | ... | ## | chrX | 1414319 | 1414349 | ... | ## | chrX | 1419383 | 1419519 | ... | ## | chrX | 1424338 | 1424420 | ... | ## | chrX | 1424338 | 1424420 | ... | ## | chrX | 1475113 | 1475229 | ... | ## | chrX | 1510791 | 1511039 | ... | ## | chrX | 1553914 | 1553976 | ... | ## | chrX | 1554586 | 1554651 | ... | ## | chrX | 1734025 | 1734161 | ... | ## | ... | ... | ... | ... | ## | chrY | 25336491 | 25336631 | ... | ## | chrY | 26778138 | 26778263 | ... | ## | chrY | 26952215 | 26952307 | ... | ## | chrY | 26979966 | 26980276 | ... | ## | chrY | 26998146 | 26998238 | ... | ## | chrY | 26998798 | 26998850 | ... | ## | chrY | 26999286 | 26999350 | ... | ## | chrY | 27003422 | 27003494 | ... | ## | chrY | 27041834 | 27041906 | ... | ## | chrY | 27197822 | 27197945 | ... | ## | chrY | 27197822 | 27197945 | ... | ## | chrY | 27606238 | 27606322 | ... | ## | chrY | 27606238 | 27606322 | ... | ## | chrY | 59222126 | 59222216 | ... | ## | chrY | 59233166 | 59233257 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome, Start, End and Strand. ## 3 hidden columns: Name, Score, Strand exons.print(n=1, merge_position=False, sort=True, formatting={&quot;Start&quot;: &quot;{:,}&quot;, &quot;Name&quot;: &quot;{:2.2}&quot;}, chain=False) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | ... | ... | ... | ... | ... | ... | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome, Start, End and Strand. f1 = pr.data.f1() f1.rp() ## {(&#39;chr1&#39;, &#39;+&#39;): Chromosome Start End Name Score Strand ## 0 chr1 3 6 interval1 0 + ## 2 chr1 8 9 interval3 0 +, (&#39;chr1&#39;, &#39;-&#39;): Chromosome Start End Name Score Strand ## 1 chr1 5 7 interval2 0 -} "],
["iterating-over-pyranges.html", "9 Iterating over PyRanges", " 9 Iterating over PyRanges PyRanges can be iterated over by a simple for loop, and the data is guaranteed to come back in natsorted order: import pyranges as pr import pandas as pd exons = pr.data.exons() cpg = pr.data.cpg() for k, df in cpg: print(k) print(df.head(3)) ## chrX ## Chromosome Start End CpG ## 0 chrX 64181 64793 62 ## 1 chrX 69133 70029 100 ## 2 chrX 148685 149461 85 ## chrY ## Chromosome Start End CpG ## 896 chrY 14181 14793 62 ## 897 chrY 19133 20029 100 ## 898 chrY 98685 99461 85 If the data is unstranded, the key is just the chromosome names, but if the data is stranded the key is a tuple of the chromosome and strand: for k, df in exons: print(k) print(df.head(3)) ## (&#39;chrX&#39;, &#39;+&#39;) ## Chromosome Start ... Score Strand ## 0 chrX 135721701 ... 0 + ## 2 chrX 135574120 ... 0 + ## 3 chrX 47868945 ... 0 + ## ## [3 rows x 6 columns] ## (&#39;chrX&#39;, &#39;-&#39;) ## Chromosome Start ... Score Strand ## 1 chrX 49069126 ... 0 - ## 4 chrX 154006958 ... 0 - ## 6 chrX 52257919 ... 0 - ## ## [3 rows x 6 columns] ## (&#39;chrY&#39;, &#39;+&#39;) ## Chromosome Start ... Score Strand ## 14 chrY 1693161 ... 0 + ## 82 chrY 1357411 ... 0 + ## 98 chrY 59233166 ... 0 + ## ## [3 rows x 6 columns] ## (&#39;chrY&#39;, &#39;-&#39;) ## Chromosome Start ... Score Strand ## 5 chrY 1481624 ... 0 - ## 8 chrY 15526614 ... 0 - ## 9 chrY 15591393 ... 0 - ## ## [3 rows x 6 columns] If you would like to iterate over the chromosomes in a stranded PyRange the idiom is for c in exons.chromosomes: print(c) df = exons[c].df print(df.head()) ## chrX ## Chromosome Start ... Score Strand ## 0 chrX 135721701 ... 0 + ## 1 chrX 135574120 ... 0 + ## 2 chrX 47868945 ... 0 + ## 3 chrX 77294333 ... 0 + ## 4 chrX 91090459 ... 0 + ## ## [5 rows x 6 columns] ## chrY ## Chromosome Start ... Score Strand ## 0 chrY 1693161 ... 0 + ## 1 chrY 1357411 ... 0 + ## 2 chrY 59233166 ... 0 + ## 3 chrY 1693161 ... 0 + ## 4 chrY 1664276 ... 0 + ## ## [5 rows x 6 columns] but notice that we need the .df accessor, because subsetting a PyRange always returns a PyRange. There are three more ways to iterate over a pyrange, namely the keys, values and items methods. These return a list, not a custom object like the python dict. If you want to create a new PyRange while iterating over it, the idiom is d = {} for k, df in exons: print(k) d[k] = df.head(3) ## (&#39;chrX&#39;, &#39;+&#39;) ## (&#39;chrX&#39;, &#39;-&#39;) ## (&#39;chrY&#39;, &#39;+&#39;) ## (&#39;chrY&#39;, &#39;-&#39;) new_gr = pr.PyRanges(d) print(new_gr) ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +3 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 135721701 | 135721963 | ... | ## | chrX | 135574120 | 135574598 | ... | ## | chrX | 47868945 | 47869126 | ... | ## | chrX | 49069126 | 49069255 | ... | ## | ... | ... | ... | ... | ## | chrY | 59233166 | 59233257 | ... | ## | chrY | 1481624 | 1481747 | ... | ## | chrY | 15526614 | 15526673 | ... | ## | chrY | 15591393 | 15592550 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 12 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Name, Score, Strand Note that this is basically the same as using the apply method of the PyRange, only that the for loops are never multithreaded. To iterate over multiple pyranges you can use pr.itergrs. It iterates over multiple pyranges at the same time, returning the dfs belonging to the same Chromosome or Chromosome/Strand at each iteration. Missing entries in one or more PyRanges returns empty dfs. import pyranges as pr l = pr.random(25), pr.random(25), pr.random(25) for key, grs in pr.itergrs(l, keys=True, strand=True): print(key) print(grs) ## (&#39;chr1&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 6 chr1 184219839 184219939 +, Chromosome Start End Strand ## 13 chr1 175797406 175797506 + ## 14 chr1 196212027 196212127 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr1&#39;, &#39;-&#39;) ## [ Chromosome Start End Strand ## 3 chr1 44722928 44723028 - ## 4 chr1 220121533 220121633 - ## 5 chr1 108550282 108550382 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 21 chr1 234415592 234415692 -] ## (&#39;chr2&#39;, &#39;+&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 19 chr2 128615766 128615866 + ## 20 chr2 215074877 215074977 +] ## (&#39;chr2&#39;, &#39;-&#39;) ## [ Chromosome Start End Strand ## 14 chr2 172265513 172265613 - ## 15 chr2 117287002 117287102 -, Chromosome Start End Strand ## 6 chr2 69427648 69427748 - ## 7 chr2 190403203 190403303 -, Chromosome Start End Strand ## 17 chr2 240792664 240792764 - ## 18 chr2 136228742 136228842 -] ## (&#39;chr3&#39;, &#39;+&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 22 chr3 140887852 140887952 + ## 23 chr3 64346573 64346673 +, Chromosome Start End Strand ## 6 chr3 85325848 85325948 +] ## (&#39;chr3&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 7 chr3 91354906 91355006 -] ## (&#39;chr4&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 24 chr4 162041999 162042099 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 15 chr4 28569793 28569893 +] ## (&#39;chr4&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 9 chr4 120710541 120710641 -, Chromosome Start End Strand ## 14 chr4 72231463 72231563 -] ## (&#39;chr5&#39;, &#39;+&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 18 chr5 101697925 101698025 +, Chromosome Start End Strand ## 10 chr5 39304429 39304529 +] ## (&#39;chr5&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 17 chr5 167132122 167132222 -, Chromosome Start End Strand ## 9 chr5 94213191 94213291 -] ## (&#39;chr6&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 0 chr6 139246089 139246189 +, Chromosome Start End Strand ## 5 chr6 165184540 165184640 +, Chromosome Start End Strand ## 13 chr6 44894836 44894936 +] ## (&#39;chr6&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 4 chr6 152560248 152560348 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr7&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 10 chr7 48232840 48232940 + ## 11 chr7 7914777 7914877 +, Chromosome Start End Strand ## 15 chr7 21944559 21944659 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr7&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 16 chr7 63071115 63071215 -] ## (&#39;chr8&#39;, &#39;+&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 20 chr8 119188925 119189025 + ## 21 chr8 18109002 18109102 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr8&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 8 chr8 131020204 131020304 -] ## (&#39;chr9&#39;, &#39;+&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 24 chr9 121108493 121108593 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr9&#39;, &#39;-&#39;) ## [ Chromosome Start End Strand ## 1 chr9 27921987 27922087 - ## 2 chr9 89728028 89728128 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr10&#39;, &#39;-&#39;) ## [ Chromosome Start End Strand ## 17 chr10 35854967 35855067 - ## 18 chr10 44901119 44901219 -, Chromosome Start End Strand ## 16 chr10 82275004 82275104 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr11&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 12 chr11 126299504 126299604 + ## 13 chr11 112587594 112587694 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr12&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 23 chr12 101040584 101040684 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 0 chr12 67585850 67585950 +] ## (&#39;chr12&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 1 chr12 57778656 57778756 - ## 2 chr12 74726497 74726597 -] ## (&#39;chr13&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 22 chr13 8240745 8240845 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr13&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 11 chr13 64001167 64001267 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr14&#39;, &#39;+&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 10 chr14 46290226 46290326 +, Chromosome Start End Strand ## 12 chr14 33526976 33527076 +] ## (&#39;chr14&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 11 chr14 47124699 47124799 -] ## (&#39;chr15&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 24 chr15 51347161 51347261 -] ## (&#39;chr16&#39;, &#39;+&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 8 chr16 68664751 68664851 +, Chromosome Start End Strand ## 23 chr16 30930905 30931005 +] ## (&#39;chr16&#39;, &#39;-&#39;) ## [ Chromosome Start End Strand ## 20 chr16 12949646 12949746 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr18&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 9 chr18 37782263 37782363 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr18&#39;, &#39;-&#39;) ## [ Chromosome Start End Strand ## 7 chr18 16224459 16224559 - ## 8 chr18 67935734 67935834 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr19&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 12 chr19 3151311 3151411 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr20&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 19 chr20 35375384 35375484 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chr22&#39;, &#39;-&#39;) ## [ Chromosome Start End Strand ## 16 chr22 32609069 32609169 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 22 chr22 27481111 27481211 -] ## (&#39;chrX&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 21 chrX 1159877 1159977 +, Chromosome Start End Strand ## 0 chrX 86673002 86673102 + ## 2 chrX 96392537 96392637 +, Chromosome Start End Strand ## 3 chrX 74992281 74992381 + ## 4 chrX 89504286 89504386 +] ## (&#39;chrX&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 1 chrX 136249439 136249539 -, Chromosome Start End Strand ## 5 chrX 107173311 107173411 -] ## (&#39;chrY&#39;, &#39;+&#39;) ## [ Chromosome Start End Strand ## 19 chrY 14817760 14817860 +, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] ## (&#39;chrY&#39;, &#39;-&#39;) ## [Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: [], Chromosome Start End Strand ## 3 chrY 34590816 34590916 -, Empty DataFrame ## Columns: [Chromosome, Start, End, Strand] ## Index: []] "],
["sorting-pyranges.html", "10 Sorting PyRanges", " 10 Sorting PyRanges pyranges are always sorted on chromosome and strand to enable faster operations. pyranges can in addition be sorted on start and end by using the function sort: import pyranges as pr import pandas as pd from io import StringIO cs = pr.data.chipseq() print(cs) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. cs_sorted = cs.sort() print(cs) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. This will sort them on Chromosome, Strand, Start and then End. Custom sorting can be done after you are done with the PyRanges-related functionality. Then you can extract the underlying dataframes with df and sort it: df = cs_sorted.df print(df.head()) ## Chromosome Start End Name Score Strand ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 2 chr1 3504032 3504057 U0 0 + ## 3 chr1 3806532 3806557 U0 0 + ## 4 chr1 5079955 5079980 U0 0 + df_sorted = df.sort_values([&quot;Chromosome&quot;, &quot;Start&quot;, &quot;End&quot;]) print(df_sorted.head(20)) ## Chromosome Start End Name Score Strand ## 451 chr1 1325303 1325328 U0 0 - ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 452 chr1 1820285 1820310 U0 0 - ## 453 chr1 2448322 2448347 U0 0 - ## 454 chr1 3046141 3046166 U0 0 - ## 455 chr1 3437168 3437193 U0 0 - ## 2 chr1 3504032 3504057 U0 0 + ## 456 chr1 3637087 3637112 U0 0 - ## 457 chr1 3681903 3681928 U0 0 - ## 3 chr1 3806532 3806557 U0 0 + ## 458 chr1 3953790 3953815 U0 0 - ## 459 chr1 5037292 5037317 U0 0 - ## 4 chr1 5079955 5079980 U0 0 + ## 5 chr1 5233543 5233568 U0 0 + ## 6 chr1 5301327 5301352 U0 0 + ## 7 chr1 5431308 5431333 U0 0 + ## 8 chr1 5449222 5449247 U0 0 + ## 460 chr1 5481750 5481775 U0 0 - ## 461 chr1 5699351 5699376 U0 0 - Now the df is sorted and start and end with interleaved strands. "],
["summarizing-pyranges.html", "11 Summarizing PyRanges", " 11 Summarizing PyRanges The summary-function gives a summary of the lengths of the intervals in a PyRange: import pyranges as pr import pandas as pd from io import StringIO gr = pr.data.exons() print(gr) ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +3 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 135721701 | 135721963 | ... | ## | chrX | 135574120 | 135574598 | ... | ## | chrX | 47868945 | 47869126 | ... | ## | chrX | 77294333 | 77294480 | ... | ## | ... | ... | ... | ... | ## | chrY | 15409586 | 15409728 | ... | ## | chrY | 15478146 | 15478273 | ... | ## | chrY | 15360258 | 15361762 | ... | ## | chrY | 15467254 | 15467278 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Name, Score, Strand print(gr.summary()) ## +-------+------------+--------------------+--------------------+-----------------------+ ## | | pyrange | coverage_forward | coverage_reverse | coverage_unstranded | ## |-------+------------+--------------------+--------------------+-----------------------| ## | count | 1000 | 452 | 421 | 873 | ## | mean | 304.292 | 314.066 | 314.458 | 314.255 | ## | std | 640.013 | 732.655 | 587.486 | 666.23 | ## | min | 4 | 15 | 4 | 4 | ## | 25% | 88 | 84.75 | 94 | 88 | ## | 50% | 127 | 123 | 138 | 127 | ## | 75% | 195.5 | 183 | 212 | 199 | ## | max | 6063 | 6063 | 5322 | 6063 | ## | sum | 304292 | 141958 | 132387 | 274345 | ## +-------+------------+--------------------+--------------------+-----------------------+ ## None The column coverage_stranded tells you how the data looks when merging all overlapping features (taking strand into account), and coverage_unstranded is the same, but all features are merged independent of their strand. To only get the length in bp of a PyRanges, use the length()-function. It takes an argument as_dict=False, which returns the lengths as a vector. print(gr.lengths()) ## 0 262 ## 1 478 ## 2 181 ## 3 147 ## 4 584 ## ... ## 995 64 ## 996 142 ## 997 127 ## 998 1504 ## 999 24 ## Length: 1000, dtype: int32 print(gr.lengths(as_dict=False)) ## 0 262 ## 1 478 ## 2 181 ## 3 147 ## 4 584 ## ... ## 995 64 ## 996 142 ## 997 127 ## 998 1504 ## 999 24 ## Length: 1000, dtype: int32 To get the length of the PyRanges in bp, use the length property. To get the non-overlapping nucleotides, use the merge()-function first. print(gr.length) ## 304292 print(gr.merge().length) ## 274345 "],
["methods-for-manipulating-single-pyranges.html", "12 Methods for manipulating single PyRanges", " 12 Methods for manipulating single PyRanges There are several methods for manipulating the contents of a PyRanges. merge creates a union of all the intervals in the ranges: The merge-method also takes the flag count to let you know the number of intervals that were merged. import pyranges as pr f1 = pr.data.f1() print(f1.merge(count=True)) ## +--------------+-----------+-----------+--------------+-----------+ ## | Chromosome | Start | End | Strand | Count | ## | (category) | (int32) | (int32) | (category) | (int32) | ## |--------------+-----------+-----------+--------------+-----------| ## | chr1 | 3 | 6 | + | 1 | ## | chr1 | 8 | 9 | + | 1 | ## | chr1 | 5 | 7 | - | 1 | ## +--------------+-----------+-----------+--------------+-----------+ ## Stranded PyRanges object has 3 rows and 5 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Cluster finds which intervals overlap, but gives each interval a cluster ID instead of merging them: import pyranges as pr f1 = pr.data.f1() print(f1.cluster()) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +2 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 3 | 6 | interval1 | 0 | ... | ## | chr1 | 8 | 9 | interval3 | 0 | ... | ## | chr1 | 5 | 7 | interval2 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 3 rows and 7 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 2 hidden columns: Strand, Cluster print(f1.cluster(strand=True)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +2 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 3 | 6 | interval1 | 0 | ... | ## | chr1 | 8 | 9 | interval3 | 0 | ... | ## | chr1 | 5 | 7 | interval2 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 3 rows and 7 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 2 hidden columns: Strand, Cluster print(f1.cluster(slack=2, strand=True, count=True)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +3 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 3 | 6 | interval1 | 0 | ... | ## | chr1 | 8 | 9 | interval3 | 0 | ... | ## | chr1 | 5 | 7 | interval2 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 3 rows and 8 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Strand, Cluster, Count It also takes an flag count. Both cluster and merge take the argument slack, so that you can merge features which are not directly overlapping. If you set slack to -1 you avoid merging bookended features. To only merge features overlapping by at least X, set slack to -X. To cluster or merge only those rows which have the same values for a certain column, you can use the argument by to cluster and merge. import pyranges as pr gr = pr.data.ensembl_gtf() print(gr) ## +--------------+------------+--------------+-----------+-----------+-------+ ## | Chromosome | Source | Feature | Start | End | +23 | ## | (category) | (object) | (category) | (int32) | (int32) | ... | ## |--------------+------------+--------------+-----------+-----------+-------| ## | 1 | havana | gene | 11868 | 14409 | ... | ## | 1 | havana | transcript | 11868 | 14409 | ... | ## | 1 | havana | exon | 11868 | 12227 | ... | ## | 1 | havana | exon | 12612 | 12721 | ... | ## | ... | ... | ... | ... | ... | ... | ## | 1 | havana | gene | 1173055 | 1179555 | ... | ## | 1 | havana | transcript | 1173055 | 1179555 | ... | ## | 1 | havana | exon | 1179364 | 1179555 | ... | ## | 1 | havana | exon | 1173055 | 1176396 | ... | ## +--------------+------------+--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 2,446 rows and 28 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 23 hidden columns: Score, Strand, Frame, gene_biotype, gene_id, gene_name, gene_source, ... (+ 16 more.) print(gr.cluster(by=&quot;gene_id&quot;)) ## +--------------+----------------+----------------+-----------+-------+ ## | Chromosome | Source | Feature | Start | +25 | ## | (category) | (object) | (category) | (int32) | ... | ## |--------------+----------------+----------------+-----------+-------| ## | 1 | ensembl_havana | gene | 1173883 | ... | ## | 1 | havana | transcript | 1173883 | ... | ## | 1 | havana | exon | 1173883 | ... | ## | 1 | havana | transcript | 1173902 | ... | ## | ... | ... | ... | ... | ... | ## | 1 | ensembl_havana | stop_codon | 450739 | ... | ## | 1 | ensembl_havana | CDS | 450742 | ... | ## | 1 | ensembl_havana | start_codon | 451675 | ... | ## | 1 | ensembl_havana | five_prime_utr | 451678 | ... | ## +--------------+----------------+----------------+-----------+-------+ ## Stranded PyRanges object has 2,446 rows and 29 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 25 hidden columns: End, Score, Strand, Frame, gene_biotype, gene_id, gene_name, ... (+ 18 more.) If you want to split a pyrange on the overlapping intervals, you can use split: import pyranges as pr f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(f1.split()) ## +--------------+-----------+-----------+------------+ ## | Chromosome | Start | End | Strand | ## | (object) | (int32) | (int32) | (object) | ## |--------------+-----------+-----------+------------| ## | chr1 | 3 | 6 | + | ## | chr1 | 8 | 9 | + | ## | chr1 | 5 | 7 | - | ## +--------------+-----------+-----------+------------+ ## Stranded PyRanges object has 3 rows and 4 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. five_end finds the starts of the regions (taking direction of transcription into account). f1.five_end() print(f1.five_end()) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 4 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 6 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. three_end finds the ends of the regions (taking direction of transcription into account). f1.three_end() print(f1.three_end()) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 5 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 6 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. extend (also aliased slack) extends the starts and ends of your interval: print(f1.slack(5)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 0 | 11 | interval1 | 0 | + | ## | chr1 | 3 | 14 | interval3 | 0 | + | ## | chr1 | 0 | 12 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(f1.slack({&quot;5&quot;: 2, &quot;3&quot;: -1})) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 5 | interval1 | 0 | + | ## | chr1 | 6 | 8 | interval3 | 0 | + | ## | chr1 | 6 | 9 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. window splits your data into windows: exons = pr.data.exons() print(exons) ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +3 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 135721701 | 135721963 | ... | ## | chrX | 135574120 | 135574598 | ... | ## | chrX | 47868945 | 47869126 | ... | ## | chrX | 77294333 | 77294480 | ... | ## | ... | ... | ... | ... | ## | chrY | 15409586 | 15409728 | ... | ## | chrY | 15478146 | 15478273 | ... | ## | chrY | 15360258 | 15361762 | ... | ## | chrY | 15467254 | 15467278 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Name, Score, Strand print(exons.window(5)) ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +3 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 135721701 | 135721706 | ... | ## | chrX | 135721706 | 135721711 | ... | ## | chrX | 135721711 | 135721716 | ... | ## | chrX | 135721716 | 135721721 | ... | ## | ... | ... | ... | ... | ## | chrY | 15467259 | 15467264 | ... | ## | chrY | 15467264 | 15467269 | ... | ## | chrY | 15467269 | 15467274 | ... | ## | chrY | 15467274 | 15467278 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 61,268 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Name, Score, Strand If you want to all windows to start at a multiple of window_size, use the tile function: You can use the overlap flag to see how many basepairs each tile overlapped with the underlying interval. print(exons.tile(5)) ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +3 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 135721700 | 135721705 | ... | ## | chrX | 135721705 | 135721710 | ... | ## | chrX | 135721710 | 135721715 | ... | ## | chrX | 135721715 | 135721720 | ... | ## | ... | ... | ... | ... | ## | chrY | 15467260 | 15467265 | ... | ## | chrY | 15467265 | 15467270 | ... | ## | chrY | 15467270 | 15467275 | ... | ## | chrY | 15467275 | 15467280 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 61,643 rows and 6 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 3 hidden columns: Name, Score, Strand print(exons.tile(5, overlap=True)) ## +--------------+-----------+-----------+-------+ ## | Chromosome | Start | End | +4 | ## | (category) | (int32) | (int32) | ... | ## |--------------+-----------+-----------+-------| ## | chrX | 135721700 | 135721705 | ... | ## | chrX | 135721705 | 135721710 | ... | ## | chrX | 135721710 | 135721715 | ... | ## | chrX | 135721715 | 135721720 | ... | ## | ... | ... | ... | ... | ## | chrY | 15467260 | 15467265 | ... | ## | chrY | 15467265 | 15467270 | ... | ## | chrY | 15467270 | 15467275 | ... | ## | chrY | 15467275 | 15467280 | ... | ## +--------------+-----------+-----------+-------+ ## Stranded PyRanges object has 61,643 rows and 7 columns from 2 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 4 hidden columns: Name, Score, Strand, TileOverlap "],
["applying-custom-methods-to-pairs-of-pyranges.html", "13 Applying custom methods to pairs of PyRanges", " 13 Applying custom methods to pairs of PyRanges By using the apply, apply_pair or apply_chunks methods, you can run custom methods on the dataframes in your PyRanges. The apply and apply_chunks methods takes a single dataframe, while apply_pair takes a pair of dataframes. import pyranges as pr chipseq = pr.data.chipseq() chipseq_background = pr.data.chipseq_background() def print_strands(df1, df2): print(df1.Chromosome.iloc[0], df1.Strand.iloc[0], df2.Strand.iloc[0]) return df1.head(5) result = chipseq.apply_pair(chipseq_background, print_strands, strandedness=&quot;opposite&quot;) ## chr1 + - ## chr1 - + ## chr2 + - ## chr2 - + ## chr3 + - ## chr3 - + ## chr4 + - ## chr4 - + ## chr5 + - ## chr5 - + ## chr6 + - ## chr6 - + ## chr7 + - ## chr7 - + ## chr8 + - ## chr8 - + ## chr9 + - ## chr9 - + ## chr10 + - ## chr10 - + ## chr11 + - ## chr11 - + ## chr12 + - ## chr12 - + ## chr13 + - ## chr13 - + ## chr14 + - ## chr14 - + ## chr15 + - ## chr15 - + ## chr16 + - ## chr16 - + ## chr17 + - ## chr17 - + ## chr18 + - ## chr18 - + ## chr19 + - ## chr19 - + ## chr20 + - ## chr20 - + ## chr21 + - ## chr21 - + ## chr22 + - ## chr22 - + ## chrX + - ## chrX - + ## chrY + - ## chrY - + print(result) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | - | ## | chrY | 7701983 | 7702008 | U0 | 0 | - | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 240 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. def set_start_to_zero(df): df.Start = 0 return df print(chipseq.apply(set_start_to_zero)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int64) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 0 | 212609559 | U0 | 0 | + | ## | chr1 | 0 | 169887554 | U0 | 0 | + | ## | chr1 | 0 | 216711036 | U0 | 0 | + | ## | chr1 | 0 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 0 | 15224260 | U0 | 0 | - | ## | chrY | 0 | 13517917 | U0 | 0 | - | ## | chrY | 0 | 8010976 | U0 | 0 | - | ## | chrY | 0 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Keyword arguments can be sent to the function: def _print(df, **kwargs): print(&quot;My keyword arguments were:&quot;, kwargs.get(&quot;value&quot;), &quot;and&quot;, kwargs.get(&quot;whatever&quot;)) return df chipseq.apply(_print, value=123, whatever=&quot;hi there!&quot;) ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! They were printed 24 times since the function was applied once per chromosome. apply_chunks splits each chromosome into nb_cpu chunks and runs each chunk in parallel, which is useful for slow row-based operations (like fisher exact, for example). "],
["intersecting-ranges.html", "14 Intersecting Ranges", " 14 Intersecting Ranges PyRanges objects can be intersected with other PyRanges to find the subset of the genome that is contained in both. The regular intersect-method finds the intersection of all combinations of ranges: 1 import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.intersect(gr2)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9988 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10073 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10079 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10082 | 10138 | H3K27me3 | 7 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10278 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10281 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10348 | H3K27me3 | 6 | - | ## | chr1 | 10280 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 49 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. The set_intersect method merges the intervals before finding the intersect: 2 print(gr.set_intersect(gr2)) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 9988 | 10445 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 1 rows and 3 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. Both methods also take a strandedness option, which can either be \"same\", \"opposite\" or False/None print(gr.set_intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 9988 | 10223 | + | ## | chr1 | 10246 | 10348 | + | ## | chr1 | 10073 | 10272 | - | ## | chr1 | 10280 | 10440 | - | ## +--------------+-----------+-----------+--------------+ ## Stranded PyRanges object has 4 rows and 4 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. The intersect method also takes a how argument, which currently accepts the option \"containment\", \"first\" or \"last\". The former gives you the intervals in self be completely within the intervals in other, while first and last gives you the first and last overlap, respectively. f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. f2 = pr.data.f2() print(f2) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. result = f2.intersect(f1, how=&quot;containment&quot;) print(result) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 1 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. "],
["overlapping-ranges.html", "15 Overlapping Ranges", " 15 Overlapping Ranges PyRanges objects can be subtracted from other PyRanges to report the intervals in self that are not in other. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.subtract(gr2)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 9988 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 9988 | H3K27me3 | 5 | + | ## | chr1 | 110246 | 110445 | H3K27me3 | 1 | + | ## | chr1 | 9916 | 9988 | H3K27me3 | 5 | - | ## | chr1 | 9951 | 9988 | H3K27me3 | 8 | - | ## | chr1 | 9978 | 9988 | H3K27me3 | 7 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 6 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. Both methods also take a strandedness option, which can either be \"same\", \"opposite\" or False/None print(gr.subtract(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 9988 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 9988 | H3K27me3 | 5 | + | ## | chr1 | 10348 | 10445 | H3K27me3 | 4 | + | ## | chr1 | 110246 | 110445 | H3K27me3 | 1 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 9978 | 10073 | H3K27me3 | 7 | - | ## | chr1 | 10001 | 10073 | H3K27me3 | 5 | - | ## | chr1 | 10272 | 10280 | H3K27me3 | 1 | - | ## | chr1 | 10272 | 10280 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. "],
["joining-ranges.html", "16 Joining Ranges", " 16 Joining Ranges You can combine all the intervals that overlap in two PyRanges objects with the join method. If you do not use a suffix, the default _b is chosen. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.join(gr2, suffix=&quot;_2&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | ... | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | ... | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | ... | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 49 rows and 11 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_2, End_2, Name_2, Score_2, Strand_2 Both methods also take a strandedness option, which can either be \"same\", \"opposite\" or False/None print(gr.join(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | ... | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | ... | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | ... | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 22 rows and 11 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b The join method also takes a how argument, which currently accepts the option \"containment\", \"inner\" (default), \"outer\", \"left\" and “right”. Containment requires that the intervals in self be completely within the intervals in other. The others are similar to SQL-style inner, outer, left and right joins. f1 = pr.data.f1() f2 = pr.data.f2() print(f2.join(f1, how=&quot;containment&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 6 | 7 | b | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 1 rows and 11 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b print(f1.join(f2, how=&quot;outer&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int64) | (int64) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 3 | 6 | interval1 | 0 | ... | ## | chr1 | 8 | 9 | interval3 | 0 | ... | ## | chr1 | -1 | -1 | -1 | -1 | ... | ## | chr1 | -1 | -1 | -1 | -1 | ... | ## | chr1 | 5 | 7 | interval2 | 0 | ... | ## | chr1 | -1 | -1 | -1 | -1 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 6 rows and 11 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b ## ## /usr/share/miniconda/lib/python3.9/site-packages/pyranges-0.0.115-py3.9.egg/pyranges/methods/join.py:87: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead. ## scdf = scdf.append(sh) ## /usr/share/miniconda/lib/python3.9/site-packages/pyranges-0.0.115-py3.9.egg/pyranges/methods/join.py:88: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead. ## ocdf = ocdf.append(oh) ## /usr/share/miniconda/lib/python3.9/site-packages/pyranges-0.0.115-py3.9.egg/pyranges/methods/join.py:87: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead. ## scdf = scdf.append(sh) ## /usr/share/miniconda/lib/python3.9/site-packages/pyranges-0.0.115-py3.9.egg/pyranges/methods/join.py:88: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead. ## ocdf = ocdf.append(oh) After joining, you can use the method new_position() to find the union or intersection of the joined ranges. By default it uses the two first columns containing “Start” and the two first containing “End”. Otherwise, the columns to be used can be given by the columns argument. print(f2.join(f1).new_position(&quot;intersection&quot;)) # same as: ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 6 | 7 | b | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 1 rows and 11 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b print(f2.join(f1).new_position(&quot;intersection&quot;, columns=[&quot;Start&quot;, &quot;End&quot;, &quot;Start_b&quot;, &quot;End_b&quot;])) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 6 | 7 | b | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 1 rows and 11 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b If you want to swap which columns are considered the Start and End, you can use the swap argument. gr1, gr2 = pr.data.chipseq(), pr.data.chipseq_background() j = gr1.join(gr2) print(j) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | ... | ## | chr8 | 38747226 | 38747251 | U0 | 0 | ... | ## | chr15 | 26105515 | 26105540 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 3 rows and 11 columns from 3 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b j2 = j.new_position(&quot;intersection&quot;) print(j2) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 226987603 | 226987617 | U0 | 0 | ... | ## | chr8 | 38747236 | 38747251 | U0 | 0 | ... | ## | chr15 | 26105515 | 26105518 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 3 rows and 11 columns from 3 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b print(j2.new_position(&quot;swap&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +6 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 226987603 | 226987628 | U0 | 0 | ... | ## | chr8 | 38747236 | 38747261 | U0 | 0 | ... | ## | chr15 | 26105493 | 26105518 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 3 rows and 11 columns from 3 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 6 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b "],
["finding-the-closest-intervals.html", "17 Finding the closest intervals", " 17 Finding the closest intervals With the nearest-method, you can search for the feature in other that is nearest the ones in self. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.nearest(gr2, suffix=&quot;_Input&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | ... | ## | chr1 | 1541598 | 1541623 | U0 | 0 | ... | ## | chr1 | 1599121 | 1599146 | U0 | 0 | ... | ## | chr1 | 3504032 | 3504057 | U0 | 0 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | ... | ## | chrY | 21910706 | 21910731 | U0 | 0 | ... | ## | chrY | 22054002 | 22054027 | U0 | 0 | ... | ## | chrY | 22210637 | 22210662 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 10,000 rows and 12 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_Input, End_Input, Name_Input, Score_Input, Strand_Input, ... (+ 1 more.) The nearest method takes a strandedness option, which can either be \"same\", \"opposite\" or False/None print(gr.nearest(gr2, suffix=&quot;_Input&quot;, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | ... | ## | chr1 | 1541598 | 1541623 | U0 | 0 | ... | ## | chr1 | 1599121 | 1599146 | U0 | 0 | ... | ## | chr1 | 3504032 | 3504057 | U0 | 0 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | ... | ## | chrY | 21910706 | 21910731 | U0 | 0 | ... | ## | chrY | 22054002 | 22054027 | U0 | 0 | ... | ## | chrY | 22210637 | 22210662 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 10,000 rows and 12 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_Input, End_Input, Name_Input, Score_Input, Strand_Input, ... (+ 1 more.) The nearest method also takes two variables, namely how and overlap. How can take the values None, \"upstream\", \"downstream\", \"next\" and \"previous\". \"upstream\" and \"downstream\" are always in reference to the PyRange the method is called on. \"next\" (to the right) and \"previous\" (to the left) are most useful to implement your own custom nearest methods. The default is None, which means that PyRanges looks in both directions. The overlap argument is a bool which indicates whether you want to include overlaps or not. f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. f2 = pr.data.f2() print(f2) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 1 | 2 | a | 0 | ... | ## | chr1 | 6 | 7 | b | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 2 rows and 12 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b, Distance print(f2.nearest(f1, how=&quot;upstream&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 6 | 7 | b | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 1 rows and 12 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b, Distance print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;, overlap=False)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 1 | 2 | a | 0 | ... | ## | chr1 | 6 | 7 | b | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 2 rows and 12 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b, Distance "],
["finding-the-k-closest-intervals.html", "18 Finding the k closest intervals", " 18 Finding the k closest intervals With the k_nearest-method, you can search for the k nearest intervals in other that is nearest the ones in self. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.k_nearest(gr2, suffix=&quot;_Input&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | ... | ## | chr1 | 169887529 | 169887554 | U0 | 0 | ... | ## | chr1 | 216711011 | 216711036 | U0 | 0 | ... | ## | chr1 | 144227079 | 144227104 | U0 | 0 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | ... | ## | chrY | 8010951 | 8010976 | U0 | 0 | ... | ## | chrY | 7405376 | 7405401 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 10,000 rows and 12 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b, Distance The nearest method takes a strandedness option, which can either be \"same\", \"opposite\" or False/None print(gr.nearest(gr2, suffix=&quot;_Input&quot;, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | ... | ## | chr1 | 1541598 | 1541623 | U0 | 0 | ... | ## | chr1 | 1599121 | 1599146 | U0 | 0 | ... | ## | chr1 | 3504032 | 3504057 | U0 | 0 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | ... | ## | chrY | 21910706 | 21910731 | U0 | 0 | ... | ## | chrY | 22054002 | 22054027 | U0 | 0 | ... | ## | chrY | 22210637 | 22210662 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 10,000 rows and 12 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_Input, End_Input, Name_Input, Score_Input, Strand_Input, ... (+ 1 more.) The nearest method takes four further options, namely how, overlap, ties and k. How can take the values None, \"upstream\", \"downstream\".“upstream”and“downstream”are always in reference to the PyRange the method is called on. The default isNone`, which means that PyRanges looks in both directions. The overlap argument is a bool which indicates whether you want to include overlaps or not. Ties is the method in which you want to resolve ties, that is intervals with an equal distance to your query interval. The options are None which means that you get all ties. This might be more than k if there are multiple intervals with the same distance. The options “first” and “last” gives you the first or last interval for each separate distance. The option “different” gives you all nearest intervals from k different distances. k is the number of different intervals you want to find. It can be a vector with the length of the query vector. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() gr.k_nearest(gr2, suffix=&quot;_Input&quot;, k=[1, 2] * 5000).print() ## +--------------+-----------+-----------+------------+-----------+-------+ ## | Chromosome | Start | End | Name | Score | +7 | ## | (category) | (int32) | (int32) | (object) | (int64) | ... | ## |--------------+-----------+-----------+------------+-----------+-------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | ... | ## | chr1 | 169887529 | 169887554 | U0 | 0 | ... | ## | chr1 | 169887529 | 169887554 | U0 | 0 | ... | ## | chr1 | 216711011 | 216711036 | U0 | 0 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | ... | ## | chrY | 8010951 | 8010976 | U0 | 0 | ... | ## | chrY | 7405376 | 7405401 | U0 | 0 | ... | ## | chrY | 7405376 | 7405401 | U0 | 0 | ... | ## +--------------+-----------+-----------+------------+-----------+-------+ ## Stranded PyRanges object has 15,000 rows and 12 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 7 hidden columns: Strand, Start_b, End_b, Name_b, Score_b, Strand_b, Distance Note that nearest intervals that are upstream of the query interval have a negative distance. "],
["create-count-matrix-from-multiple-pyranges.html", "19 Create count-matrix from multiple PyRanges", " 19 Create count-matrix from multiple PyRanges If you have multiple pyranges you want to create a count-matrix from, you can use count_overlaps(grs, features=None, how=None, nb_cpu=1, strandedness=None). grs is a dictionary of pyranges, features is the pyrange you want to count overlaps in. If no features-arguments is provided, one is created from the grs. from io import StringIO import pyranges as pr import pandas as pd a = &quot;&quot;&quot;Chromosome Start End chr1 6 12 chr1 10 20 chr1 22 27 chr1 24 30&quot;&quot;&quot; b = &quot;&quot;&quot;Chromosome Start End chr1 12 32 chr1 14 30&quot;&quot;&quot; c = &quot;&quot;&quot;Chromosome Start End chr1 8 15 chr1 10 14 chr1 32 34&quot;&quot;&quot; grs = [pr.PyRanges(pd.read_table(StringIO(x), sep=&quot;\\s+&quot;)) for x in [a, b, c]] grs = {k: v for k, v in zip(&quot;abc&quot;, grs)} features = pr.concat(grs.values()).split() print(features) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (object) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 6 | 8 | ## | chr1 | 8 | 10 | ## | chr1 | 10 | 12 | ## | chr1 | 12 | 14 | ## | ... | ... | ... | ## | chr1 | 24 | 27 | ## | chr1 | 27 | 30 | ## | chr1 | 30 | 32 | ## | chr1 | 32 | 34 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 12 rows and 3 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. print(pr.count_overlaps(grs, features)) ## +--------------+-----------+-----------+-----------+-----------+-----------+ ## | Chromosome | Start | End | a | b | c | ## | (object) | (int32) | (int32) | (int32) | (int32) | (int32) | ## |--------------+-----------+-----------+-----------+-----------+-----------| ## | chr1 | 6 | 8 | 1 | 0 | 0 | ## | chr1 | 8 | 10 | 1 | 0 | 1 | ## | chr1 | 10 | 12 | 2 | 0 | 2 | ## | chr1 | 12 | 14 | 1 | 1 | 2 | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 24 | 27 | 2 | 2 | 0 | ## | chr1 | 27 | 30 | 1 | 2 | 0 | ## | chr1 | 30 | 32 | 0 | 1 | 0 | ## | chr1 | 32 | 34 | 0 | 0 | 1 | ## +--------------+-----------+-----------+-----------+-----------+-----------+ ## Unstranded PyRanges object has 12 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. print(pr.count_overlaps(grs)) ## +--------------+-----------+-----------+-----------+-----------+-----------+ ## | Chromosome | Start | End | a | b | c | ## | (object) | (int32) | (int32) | (int32) | (int32) | (int32) | ## |--------------+-----------+-----------+-----------+-----------+-----------| ## | chr1 | 6 | 8 | 1 | 0 | 0 | ## | chr1 | 8 | 10 | 1 | 0 | 1 | ## | chr1 | 10 | 12 | 2 | 0 | 2 | ## | chr1 | 12 | 14 | 1 | 1 | 2 | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 24 | 27 | 2 | 2 | 0 | ## | chr1 | 27 | 30 | 1 | 2 | 0 | ## | chr1 | 30 | 32 | 0 | 1 | 0 | ## | chr1 | 32 | 34 | 0 | 0 | 1 | ## +--------------+-----------+-----------+-----------+-----------+-----------+ ## Unstranded PyRanges object has 12 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. "],
["statistics-colocalization-and-co-occurence-measures.html", "20 Statistics: colocalization and co-occurence measures", " 20 Statistics: colocalization and co-occurence measures PyRanges can compute a normalized Jaccard-statistic (ranging from 0 to 1) to compute the similarities between two ranges. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.stats.jaccard(gr2, strandedness=&quot;same&quot;)) ## 6.657609543683281e-05 To compute the similarities between two sets of ranges which do not necessarily overlap much, we can use the relative distance function. It describes the relative distances between each interval in one set and the two closest intervals in another. Any deviance from a uniform distribution is an indication of spatial correlation. print(gr.stats.relative_distance(gr2, strandedness=&quot;same&quot;)) ## reldist count total fraction ## 0 0.00 254 9930 0.025579 ## 1 0.01 210 9930 0.021148 ## 2 0.02 222 9930 0.022356 ## 3 0.03 240 9930 0.024169 ## 4 0.04 212 9930 0.021349 ## 5 0.05 191 9930 0.019235 ## 6 0.06 192 9930 0.019335 ## 7 0.07 205 9930 0.020645 ## 8 0.08 162 9930 0.016314 ## 9 0.09 189 9930 0.019033 ## 10 0.10 186 9930 0.018731 ## 11 0.11 212 9930 0.021349 ## 12 0.12 209 9930 0.021047 ## 13 0.13 189 9930 0.019033 ## 14 0.14 201 9930 0.020242 ## 15 0.15 178 9930 0.017925 ## 16 0.16 203 9930 0.020443 ## 17 0.17 224 9930 0.022558 ## 18 0.18 196 9930 0.019738 ## 19 0.19 212 9930 0.021349 ## 20 0.20 208 9930 0.020947 ## 21 0.21 196 9930 0.019738 ## 22 0.22 203 9930 0.020443 ## 23 0.23 198 9930 0.019940 ## 24 0.24 223 9930 0.022457 ## 25 0.25 186 9930 0.018731 ## 26 0.26 189 9930 0.019033 ## 27 0.27 192 9930 0.019335 ## 28 0.28 163 9930 0.016415 ## 29 0.29 204 9930 0.020544 ## 30 0.30 210 9930 0.021148 ## 31 0.31 202 9930 0.020342 ## 32 0.32 211 9930 0.021249 ## 33 0.33 195 9930 0.019637 ## 34 0.34 197 9930 0.019839 ## 35 0.35 175 9930 0.017623 ## 36 0.36 214 9930 0.021551 ## 37 0.37 178 9930 0.017925 ## 38 0.38 176 9930 0.017724 ## 39 0.39 193 9930 0.019436 ## 40 0.40 192 9930 0.019335 ## 41 0.41 179 9930 0.018026 ## 42 0.42 209 9930 0.021047 ## 43 0.43 184 9930 0.018530 ## 44 0.44 198 9930 0.019940 ## 45 0.45 208 9930 0.020947 ## 46 0.46 192 9930 0.019335 ## 47 0.47 184 9930 0.018530 ## 48 0.48 183 9930 0.018429 ## 49 0.49 201 9930 0.020242 PyRanges also contains yet another method (which is still in beta-mode) for computing colocalization statistics, the Forbes coefficient: print(gr.stats.forbes(gr2, strandedness=&quot;same&quot;)) Please report any issues you encounter using it :) See this paper for a discussion of jaccard and forbes: https://doi.org/10.1093/bib/bbz083 "],
["statistics-simes-method.html", "21 Statistics: Simes method", " 21 Statistics: Simes method Simes method lets you combine dependent p-values into one. The function takes three arguments: a dataframe, the columns identifying the rows to merge and the column containing the p-values. import numpy as np import pyranges as pr gr = pr.random() gr.P = np.random.random(len(gr)) gr.Cluster = np.random.randint(20, size=len(gr)) print(gr) ## +--------------+-----------+-----------+--------------+-------+ ## | Chromosome | Start | End | Strand | +2 | ## | (category) | (int32) | (int32) | (category) | ... | ## |--------------+-----------+-----------+--------------+-------| ## | chr1 | 31508333 | 31508433 | + | ... | ## | chr1 | 60361025 | 60361125 | + | ... | ## | chr1 | 86812187 | 86812287 | + | ... | ## | chr1 | 32953454 | 32953554 | + | ... | ## | ... | ... | ... | ... | ... | ## | chrY | 20420498 | 20420598 | - | ... | ## | chrY | 16881974 | 16882074 | - | ... | ## | chrY | 19224822 | 19224922 | - | ... | ## | chrY | 40440125 | 40440225 | - | ... | ## +--------------+-----------+-----------+--------------+-------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 2 hidden columns: P, Cluster print(pr.stats.simes(gr.df, &quot;Cluster&quot;, &quot;P&quot;)) ## Cluster Simes ## 0 0 0.507640 ## 1 1 0.727866 ## 2 2 0.652764 ## 3 3 0.576517 ## 4 4 0.261996 ## 5 5 0.578391 ## 6 6 0.821094 ## 7 7 0.659295 ## 8 8 0.327923 ## 9 9 0.535823 ## 10 10 0.707581 ## 11 11 0.216320 ## 12 12 0.249903 ## 13 13 0.641188 ## 14 14 0.767881 ## 15 15 0.489210 ## 16 16 0.067533 ## 17 17 0.184768 ## 18 18 0.654656 ## 19 19 0.988574 print(pr.stats.simes(gr.df, [&quot;Cluster&quot;, &quot;Strand&quot;], &quot;P&quot;)) ## Cluster Strand Simes ## 0 0 + 0.860658 ## 1 0 - 0.306699 ## 2 1 + 0.441648 ## 3 1 - 0.669720 ## 4 2 + 0.348891 ## 5 2 - 0.654405 ## 6 3 + 0.633039 ## 7 3 - 0.470243 ## 8 4 + 0.231765 ## 9 4 - 0.253623 ## 10 5 + 0.747858 ## 11 5 - 0.299299 ## 12 6 + 0.796972 ## 13 6 - 0.690357 ## 14 7 + 0.826013 ## 15 7 - 0.329647 ## 16 8 + 0.338264 ## 17 8 - 0.311249 ## 18 9 + 0.568032 ## 19 9 - 0.292267 ## 20 10 + 0.478201 ## 21 10 - 0.519315 ## 22 11 + 0.256721 ## 23 11 - 0.114060 ## 24 12 + 0.222136 ## 25 12 - 0.168609 ## 26 13 + 0.775846 ## 27 13 - 0.490705 ## 28 14 + 0.846456 ## 29 14 - 0.636822 ## 30 15 + 0.440519 ## 31 15 - 0.366908 ## 32 16 + 0.034485 ## 33 16 - 0.415740 ## 34 17 + 0.246785 ## 35 17 - 0.096080 ## 36 18 + 0.892933 ## 37 18 - 0.436234 ## 38 19 + 0.988574 ## 39 19 - 0.691443 "],
["statistics-compute-fisher-exact.html", "22 Statistics: compute Fisher exact", " 22 Statistics: compute Fisher exact You can use pyranges to compute Fisher Exact quickly. To do so you need to have the package fisher installed. import pyranges as pr gr = pr.random(1000) import numpy as np n1 = np.random.randint(0, high=20, size=1000) d2 = np.random.randint(0, high=20, size=1000) n2 = np.random.randint(0, high=20, size=1000) d1 = np.random.randint(0, high=20, size=1000) fe = pr.stats.fisher_exact(n1, n2, d1, d2).head() ## /usr/share/miniconda/lib/python3.9/site-packages/pyranges-0.0.115-py3.9.egg/pyranges/statistics.py:163: RuntimeWarning: divide by zero encountered in true_divide ## /usr/share/miniconda/lib/python3.9/site-packages/pyranges-0.0.115-py3.9.egg/pyranges/statistics.py:163: RuntimeWarning: invalid value encountered in true_divide print(fe) ## OR P PLeft PRight ## 0 0.047619 0.066667 0.066667 0.997980 ## 1 0.606061 0.657020 0.467447 0.844353 ## 2 2.363636 0.595556 0.902222 0.471111 ## 3 0.788927 0.802224 0.413398 0.764532 ## 4 0.820513 1.000000 0.544464 0.734860 You can get the false-discovery rate corrected fdr with pyranges.stats.fdr: print(pr.stats.fdr(fe.P)) ## 0 0.333333 ## 1 1.000000 ## 2 1.000000 ## 3 1.000000 ## 4 1.000000 ## Name: P, dtype: float64 "],
["statistics-computing-the-matthews-correlation-coeficcient-between-ranges.html", "23 Statistics: computing the Matthews correlation coeficcient between ranges", " 23 Statistics: computing the Matthews correlation coeficcient between ranges The Matthews correlation coefficient is a correlation coefficient that works well when the classes of data are really imbalanced. For this reason it works well when you want to compare the correlation between two ranges. If you want to compute the MCC between two or more ranges, you can use pr.stat.mcc. You need to give the chromosome sizes as a pyrange. You can get these using pyranges_db. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() chromsizes = pr.data.chromsizes() mcc = pr.stats.mcc([gr, gr2], labels=&quot;chip input&quot;.split(), genome=chromsizes, strand=True) print(mcc) ## T F Strand TP FP TN FN MCC ## 0 chip chip + 125235 0 3095568748 0 1.000000 ## 1 chip chip - 122745 0 3095571238 0 1.000000 ## 2 chip input + 3 114576 3095454172 125232 -0.000014 ## 4 chip input - 0 118126 3095453112 122745 -0.000039 ## 3 input chip + 3 125232 3095454172 114576 -0.000014 ## 5 input chip - 0 122745 3095453112 118126 -0.000039 ## 6 input input + 114579 0 3095579404 0 1.000000 ## 7 input input - 118126 0 3095575857 0 1.000000 If you want to create a symmetric matrix from the result: print(print(mcc.set_index([&quot;Strand&quot;, &quot;T&quot;, &quot;F&quot;]).MCC.unstack())) # or just mcc.set_index([&quot;T&quot;, &quot;F&quot;]).MCC.unstack() in the unstranded case ## F chip input ## Strand T ## + chip 1.000000 -0.000014 ## input -0.000014 1.000000 ## - chip 1.000000 -0.000039 ## input -0.000039 1.000000 ## None "],
["statistics-rowbased-operations.html", "24 Statistics: rowbased operations", " 24 Statistics: rowbased operations pyranges includes fast rowbased Pearson and Spearman correlations, including a fast row-based version of rankdata. import pyranges as pr gr = pr.random(1000) import numpy as np size = (int(1e3), 5) d1 = np.random.randint(0, high=20, size=size) d2 = np.random.randint(0, high=20, size=size) spearman = pr.stats.rowbased_spearman(d1, d2) # or rowbased_pearson(d1, d2) print(spearman[:5]) ## [ 0.3 0.66688593 -0.61558701 -0.35909242 0.05129892] ranks = pr.stats.rowbased_rankdata(d1) # similar to scipy.stats.rankdata print(ranks) ## 0 1 2 3 4 ## 0 4.0 5.0 2.0 1.0 3.0 ## 1 1.0 3.0 5.0 2.0 4.0 ## 2 3.0 1.5 1.5 4.0 5.0 ## 3 2.0 3.0 5.0 1.0 4.0 ## 4 5.0 4.0 2.0 1.0 3.0 ## .. ... ... ... ... ... ## 995 2.0 5.0 3.0 4.0 1.0 ## 996 3.0 4.0 1.5 5.0 1.5 ## 997 3.0 4.0 5.0 1.5 1.5 ## 998 2.0 4.0 4.0 1.0 4.0 ## 999 5.0 1.5 3.0 1.5 4.0 ## ## [1000 rows x 5 columns] "],
["turning-ranges-into-rles.html", "25 Turning Ranges into RLEs", " 25 Turning Ranges into RLEs Ranges can be turned into dicts of run length encodings with the to_rle function: import pyranges as pr gr = pr.data.aorta() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | ## | chr1 | 10024 | 10223 | H3K27me3 | 1 | + | ## | chr1 | 10246 | 10445 | H3K27me3 | 4 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 9978 | 10177 | H3K27me3 | 7 | - | ## | chr1 | 10001 | 10200 | H3K27me3 | 5 | - | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 11 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(gr.to_rle()) ## chr1 + ## -- ## +--------+--------+------+------+-------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | ... | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+-------+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements (avg. length 11044.5) ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | ... | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+------+------+------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | ... | 2.0 | 1.0 | 2.0 | 1.0 | ## +--------+--------+------+------+------+-------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements (avg. length 870.0) ## RleDict object with 2 chromosomes/strand pairs. print(gr.to_rle(strand=True)) ## chr1 + ## -- ## +--------+--------+------+------+-------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | ... | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+-------+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements (avg. length 11044.5) ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | ... | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+------+------+------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | ... | 2.0 | 1.0 | 2.0 | 1.0 | ## +--------+--------+------+------+------+-------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements (avg. length 870.0) ## RleDict object with 2 chromosomes/strand pairs. print(gr.to_rle(strand=True, rpm=True)) ## chr1 + ## -- ## +--------+--------+-------------------+-------+---------+-------------------+ ## | Runs | 9939 | 14 | ... | 99801 | 199 | ## |--------+--------+-------------------+-------+---------+-------------------| ## | Values | 0.0 | 90909.09090909091 | ... | 0.0 | 90909.09090909091 | ## +--------+--------+-------------------+-------+---------+-------------------+ ## Rle of length 110445 containing 10 elements (avg. length 11044.5) ## ## chr1 - ## -- ## +--------+--------+-------+-------------------+ ## | Runs | 9916 | ... | 114 | ## |--------+--------+-------+-------------------| ## | Values | 0.0 | ... | 90909.09090909091 | ## +--------+--------+-------+-------------------+ ## Rle of length 10440 containing 12 elements (avg. length 870.0) ## RleDict object with 2 chromosomes/strand pairs. To get the RPM-normalized coverage, use the rpm argument. You can also create coverage for an any numeric value in your PyRanges: print(gr.to_rle(&quot;Score&quot;)) ## chr1 + ## -- ## +--------+--------+------+------+-------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | ... | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+-------+---------+-------| ## | Values | 0.0 | 7.0 | 12.0 | ... | 4.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements (avg. length 11044.5) ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | ... | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+------+------+------+-------| ## | Values | 0.0 | 5.0 | 13.0 | 20.0 | ... | 6.0 | 1.0 | 7.0 | 6.0 | ## +--------+--------+------+------+------+-------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements (avg. length 870.0) ## RleDict object with 2 chromosomes/strand pairs. "],
["an-introduction-to-rles.html", "26 An introduction to RLEs", " 26 An introduction to RLEs Rles are runlengths - a datastructure that can compactly describe the coverage of a genome (or some other score that is associated with each nucleotide). It is used for efficient genomewide arithmetic operations on these scores. from pyrle import Rle runs = [10, 10, 10, 10] values = [0, 1, 0, 0] r1 = Rle(runs, values) print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 0.0 | 1.0 | 0.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements (avg. length 13.333) runs2 = [11, 9, 20] values2 = [100, 0, 100] r2 = Rle(runs2, values2) print(r2) ## +--------+-------+-----+-------+ ## | Runs | 11 | 9 | 20 | ## |--------+-------+-----+-------| ## | Values | 100.0 | 0.0 | 100.0 | ## +--------+-------+-----+-------+ ## Rle of length 40 containing 3 elements (avg. length 13.333) print(r1 + r2) ## +--------+-------+-------+-----+-------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+-------+-------+-----+-------| ## | Values | 100.0 | 101.0 | 1.0 | 100.0 | ## +--------+-------+-------+-----+-------+ ## Rle of length 40 containing 4 elements (avg. length 10.0) print(r1 * r2) ## +--------+------+-------+------+ ## | Runs | 10 | 1 | 29 | ## |--------+------+-------+------| ## | Values | 0.0 | 100.0 | 0.0 | ## +--------+------+-------+------+ ## Rle of length 40 containing 3 elements (avg. length 13.333) print(r1.runs) ## [10 10 20] print(r1.values) ## [0. 1. 0.] r1 = r1 + 5 print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 5.0 | 6.0 | 5.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements (avg. length 13.333) print(r2 / r1) ## +--------+------+--------------------+-----+------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+------+--------------------+-----+------| ## | Values | 20.0 | 16.666666666666668 | 0.0 | 20.0 | ## +--------+------+--------------------+-----+------+ ## Rle of length 40 containing 4 elements (avg. length 10.0) Rles have two helper-methods, numbers_only and defragment. The former replaces NaN with zero and infinity with large finite numbers, while the latter merges consecutive runs of duplicate values in the Rle (which might occur when manually manipulating the values vector). import numpy as np from pyrle import Rle runs2 = [11, 9, 20] values2 = [100, 0, 100] r2 = Rle(runs2, values2) r2.values = np.array([1, 1, 1], dtype=np.double) print(r2) ## +--------+------+-----+------+ ## | Runs | 11 | 9 | 20 | ## |--------+------+-----+------| ## | Values | 1.0 | 1.0 | 1.0 | ## +--------+------+-----+------+ ## Rle of length 40 containing 3 elements (avg. length 13.333) print(r2.defragment()) ## +--------+------+ ## | Runs | 40 | ## |--------+------| ## | Values | 1.0 | ## +--------+------+ ## Rle of length 40 containing 1 elements (avg. length 40.0) "],
["run-length-encoding-dicts.html", "27 Run Length Encoding dicts", " 27 Run Length Encoding dicts Since you need more than one run length to describe a genome with multiple chromosomes, pyranges has a datastructure called PyRles for collections of Rles. It can be created from a PyRanges object by invoking the to_rle function. Rledicts support the arithmetic operations +, -, /, and *. import pyranges as pr gr = pr.data.chipseq() gr_bg = pr.data.chipseq_background() cs = gr.to_rle() print(cs) ## chr1 + ## +--------+-----------+------+---------+-------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | ... | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+-------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+---------+-------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements (avg. length 276437.275) ## ... ## chrY - ## +--------+-----------+------+----------+-------+------+----------+------+ ## | Runs | 7046809 | 25 | 358542 | ... | 25 | 156610 | 25 | ## |--------+-----------+------+----------+-------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+----------+------+ ## Rle of length 22210662 containing 32 elements (avg. length 694083.188) ## RleDict object with 48 chromosomes/strand pairs. bg = gr_bg.to_rle() print(bg) ## chr1 + ## +--------+-----------+------+-----------+-------+------+-----------+------+ ## | Runs | 1041102 | 25 | 1088232 | ... | 25 | 1774357 | 25 | ## |--------+-----------+------+-----------+-------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+-----------+-------+------+-----------+------+ ## Rle of length 245614348 containing 724 elements (avg. length 339246.337) ## ... ## chrY - ## +--------+------------+------+--------+-------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | ... | 25 | 45465323 | 25 | ## |--------+------------+------+--------+-------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+-------+------+------------+------+ ## Rle of length 57402239 containing 10 elements (avg. length 5740223.9) ## RleDict object with 50 chromosomes/strand pairs. print(cs + bg) ## chr1 + ## +--------+-----------+------+----------+-------+------+-----------+------+ ## | Runs | 1041102 | 25 | 500471 | ... | 25 | 1156833 | 25 | ## |--------+-----------+------+----------+-------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+-----------+------+ ## Rle of length 247134924 containing 1618 elements (avg. length 152740.991) ## ... ## chrY - ## +--------+-----------+------+----------+-------+------+------------+------+ ## | Runs | 7046809 | 25 | 358542 | ... | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+-------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+------------+------+ ## Rle of length 57402239 containing 42 elements (avg. length 1366719.976) ## RleDict object with 50 chromosomes/strand pairs. When using arithmetic operations with a stranded and an unstranded PyRle, the stranded PyRle is automatically demoted to an unstranded PyRle. bg_stranded = gr_bg.to_rle(strand=True) print(bg_stranded) ## chr1 + ## +--------+-----------+------+-----------+-------+------+-----------+------+ ## | Runs | 1041102 | 25 | 1088232 | ... | 25 | 1774357 | 25 | ## |--------+-----------+------+-----------+-------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+-----------+-------+------+-----------+------+ ## Rle of length 245614348 containing 724 elements (avg. length 339246.337) ## ... ## chrY - ## +--------+------------+------+--------+-------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | ... | 25 | 45465323 | 25 | ## |--------+------------+------+--------+-------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+-------+------+------------+------+ ## Rle of length 57402239 containing 10 elements (avg. length 5740223.9) ## RleDict object with 50 chromosomes/strand pairs. print(cs + bg_stranded) ## chr1 + ## +--------+-----------+------+----------+-------+------+-----------+------+ ## | Runs | 1041102 | 25 | 500471 | ... | 25 | 1156833 | 25 | ## |--------+-----------+------+----------+-------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+-----------+------+ ## Rle of length 247134924 containing 1618 elements (avg. length 152740.991) ## ... ## chrY - ## +--------+-----------+------+----------+-------+------+------------+------+ ## | Runs | 7046809 | 25 | 358542 | ... | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+-------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+------------+------+ ## Rle of length 57402239 containing 42 elements (avg. length 1366719.976) ## RleDict object with 50 chromosomes/strand pairs. Like Rles, PyGRles supports arithmetic operations with numbers. print((0.67 + cs) * 5) ## chr1 + ## +--------+-----------+------+---------+-------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | ... | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+-------+------+-----------+------| ## | Values | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+---------+-------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements (avg. length 276437.275) ## ... ## chrY - ## +--------+-----------+------+----------+-------+------+----------+------+ ## | Runs | 7046809 | 25 | 358542 | ... | 25 | 156610 | 25 | ## |--------+-----------+------+----------+-------+------+----------+------| ## | Values | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+----------+-------+------+----------+------+ ## Rle of length 22210662 containing 32 elements (avg. length 694083.188) ## RleDict object with 48 chromosomes/strand pairs. You can subset an Rledict with a pyranges: print(bg[gr_bg]) ## +--------------+-----------+-----------+-----------+-----------+-------+ ## | Chromosome | Start | End | ID | Run | +2 | ## | (object) | (int64) | (int64) | (int64) | (int64) | ... | ## |--------------+-----------+-----------+-----------+-----------+-------| ## | chr1 | 39036822 | 39036847 | 0 | 25 | ... | ## | chr1 | 224145989 | 224146014 | 1 | 25 | ... | ## | chr1 | 167802964 | 167802989 | 2 | 25 | ... | ## | chr1 | 69101066 | 69101091 | 3 | 25 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 11936866 | 11936891 | 1 | 25 | ... | ## | chrY | 10629111 | 10629136 | 2 | 25 | ... | ## | chrY | 10632456 | 10632481 | 3 | 25 | ... | ## | chrY | 11918814 | 11918839 | 4 | 25 | ... | ## +--------------+-----------+-----------+-----------+-----------+-------+ ## Stranded PyRanges object has 10,004 rows and 7 columns from 25 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 2 hidden columns: Value, Strand "],
["subsetting-rles.html", "28 Subsetting Rles", " 28 Subsetting Rles Rles can be subsetted using an integer (or a list of integers) to get the RLE value at one or more points. from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r) ## +--------+-----+-----+-----+-----+-----+-----+ ## | Runs | 3 | 2 | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----+-----+-----| ## | Values | 0.0 | 1.0 | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+-----+-----+ ## Rle of length 9 containing 6 elements (avg. length 1.5) print(r[2], r[3]) ## 0.0 1.0 print(r[[3, 5, 7]]) ## [1. 2. 0.] To get the slice of one or more run lengths use a slice or a dataframe with (at least) the columns Start and End. import pandas as pd from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r[5:10]) ## +--------+-----+-----+-----+-----+ ## | Runs | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 4 containing 4 elements (avg. length 1.0) df = pd.DataFrame({&quot;Start&quot;: [2, 5], &quot;End&quot;: [4, 900]}) print(df.to_csv(index=False, sep=&quot;\\t&quot;)) ## Start End ## 2 4 ## 5 900 print(r[df], end=&quot;\\n&quot;) ## Start End ID Run Value ## 0 2 4 0 1 0.0 ## 1 2 4 0 1 1.0 ## 2 5 900 1 1 2.0 ## 3 5 900 1 1 1.0 ## 4 5 900 1 1 0.0 ## 5 5 900 1 1 1.0 "],
["subsetting-pyrles.html", "29 Subsetting PyRles", " 29 Subsetting PyRles Rles can be subsetted on Chromosome, Strand or Chromosome/Strand pairs import pyranges as pr gr = pr.data.chipseq() c = gr.to_rle() print(c[&quot;chr1&quot;]) ## chr1 + ## -- ## +--------+-----------+------+---------+-------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | ... | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+-------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+---------+-------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements (avg. length 276437.275) ## ## chr1 - ## -- ## +--------+-----------+------+----------+-------+------+----------+------+ ## | Runs | 1325303 | 25 | 494957 | ... | 25 | 962494 | 25 | ## |--------+-----------+------+----------+-------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+----------+------+ ## Rle of length 246145556 containing 868 elements (avg. length 283577.829) ## RleDict object with 2 chromosomes/strand pairs. print(c[&quot;chr1&quot;, &quot;+&quot;]) ## +--------+-----------+------+---------+-------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | ... | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+-------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+---------+-------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements (avg. length 276437.275) print(c[&quot;-&quot;]) ## chr1 - ## +--------+-----------+------+----------+-------+------+----------+------+ ## | Runs | 1325303 | 25 | 494957 | ... | 25 | 962494 | 25 | ## |--------+-----------+------+----------+-------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+----------+------+ ## Rle of length 246145556 containing 868 elements (avg. length 283577.829) ## ... ## chrY - ## +--------+-----------+------+----------+-------+------+----------+------+ ## | Runs | 7046809 | 25 | 358542 | ... | 25 | 156610 | 25 | ## |--------+-----------+------+----------+-------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+-------+------+----------+------+ ## Rle of length 22210662 containing 32 elements (avg. length 694083.188) ## RleDict object with 24 chromosomes/strand pairs. To get the coverage of one or more intervals, you can use a PyRanges-object to subset the PyRles import pyranges as pr f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. f1_c = f1.to_rle() print(f1_c) ## chr1 + ## -- ## +--------+-----+-----+-----+-----+ ## | Runs | 3 | 3 | 2 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 9 containing 4 elements (avg. length 2.25) ## ## chr1 - ## -- ## +--------+-----+-----+ ## | Runs | 5 | 2 | ## |--------+-----+-----| ## | Values | 0.0 | 1.0 | ## +--------+-----+-----+ ## Rle of length 7 containing 2 elements (avg. length 3.5) ## RleDict object with 2 chromosomes/strand pairs. print(f1_c[f1]) ## +--------------+-----------+-----------+-----------+-----------+-------+ ## | Chromosome | Start | End | ID | Run | +2 | ## | (object) | (int64) | (int64) | (int64) | (int64) | ... | ## |--------------+-----------+-----------+-----------+-----------+-------| ## | chr1 | 3 | 6 | 0 | 3 | ... | ## | chr1 | 8 | 9 | 1 | 1 | ... | ## | chr1 | 5 | 7 | 0 | 2 | ... | ## +--------------+-----------+-----------+-----------+-----------+-------+ ## Stranded PyRanges object has 3 rows and 7 columns from 1 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 2 hidden columns: Value, Strand "],
["using-multiple-cores.html", "30 Using multiple cores", " 30 Using multiple cores Most PyRanges and PyRle-operations can be run in parallel. Even user-made functions can be run in parallel using the apply, apply_pair or apply_chunks methods. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() gr.intersect(gr3, nb_cpu=5) PyRanges uses Ray, a “flexible, high-performance distributed execution framework” to run in parallel-mode. As Ray is a rather heavy dependency, it is not automatically installed with pyranges, but can easily be installed using conda or pip. All pyranges-methods take a flag nb_cpu. It lets you run the method with nb_cpu cores. As it uses Ray behind the scenes, it will fail if Ray is already initialized. To use nb_cpu with pyrle methods, you need to use r.add(r2, nb_cpu=48), not r + r2. Note: By default PyRanges uses no extra cores. Unless the data are reasonably big or the functions are very long-running, running in parallel-mode is actually more time-consuming than single-core mode. Also, if the PyRanges contains a lot of text data, there might be less to be gained by using multithreading. This is due to how strings are represented in memory in Python and Pandas. "],
["genomicfeatures-methods-using-genomic-context.html", "31 GenomicFeatures: methods using genomic context", " 31 GenomicFeatures: methods using genomic context The PyRanges library has a few methods that operate on a genomic context. Their functions are found in the pyranges.gf namespace and the methods to be used on a PyRanges-object are found in the gr.features namespace. introns can be used on pyranges annotated with gene_id and exon_id. import pyranges as pr gr = pr.data.ucsc_bed() print(gr) ## +--------------+-----------+-----------+------------+------------+-------+ ## | Chromosome | Start | End | Feature | gene_id | +4 | ## | (category) | (int32) | (int32) | (object) | (object) | ... | ## |--------------+-----------+-----------+------------+------------+-------| ## | chr1 | 12776117 | 12788726 | gene | AADACL3 | ... | ## | chr1 | 169075927 | 169101957 | gene | ATP1B1 | ... | ## | chr1 | 6845383 | 7829766 | gene | CAMTA1 | ... | ## | chr1 | 20915589 | 20945396 | gene | CDA | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 152661096 | 152663330 | exon | PNMA6E | ... | ## | chrX | 152661096 | 152666808 | transcript | PNMA6E | ... | ## | chrX | 152664164 | 152664378 | exon | PNMA6E | ... | ## | chrX | 152666701 | 152666808 | exon | PNMA6E | ... | ## +--------------+-----------+-----------+------------+------------+-------+ ## Stranded PyRanges object has 5,519 rows and 9 columns from 30 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 4 hidden columns: transcript_id, Strand, exon_number, transcript_name print(gr.features.introns(by=&quot;transcript&quot;)) # default is by gene ## +--------------+-----------+-----------+------------+--------------+-------+ ## | Chromosome | Start | End | Feature | gene_id | +4 | ## | (object) | (int32) | (int32) | (object) | (object) | ... | ## |--------------+-----------+-----------+------------+--------------+-------| ## | chr1 | 12227 | 12612 | intron | LOC102725121 | ... | ## | chr1 | 12721 | 13220 | intron | LOC102725121 | ... | ## | chr1 | 12227 | 12612 | intron | DDX11L1 | ... | ## | chr1 | 12721 | 13220 | intron | DDX11L1 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 9714193 | 9716613 | intron | GPR143 | ... | ## | chrX | 9716706 | 9727371 | intron | GPR143 | ... | ## | chrX | 9727466 | 9728756 | intron | GPR143 | ... | ## | chrX | 9728866 | 9733607 | intron | GPR143 | ... | ## +--------------+-----------+-----------+------------+--------------+-------+ ## Stranded PyRanges object has 4,128 rows and 9 columns from 30 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 4 hidden columns: transcript_id, Strand, exon_number, transcript_name tes/tss can be used to find the starts and ends of transcripts: import pyranges as pr gr = pr.data.ucsc_bed() print(gr[gr.Feature == &quot;transcript&quot;]) ## +--------------+-----------+-----------+------------+--------------+-------+ ## | Chromosome | Start | End | Feature | gene_id | +4 | ## | (category) | (int32) | (int32) | (object) | (object) | ... | ## |--------------+-----------+-----------+------------+--------------+-------| ## | chr1 | 11868 | 14362 | transcript | LOC102725121 | ... | ## | chr1 | 11873 | 14409 | transcript | DDX11L1 | ... | ## | chr1 | 30365 | 30503 | transcript | MIR1302-2 | ... | ## | chr1 | 30365 | 30503 | transcript | MIR1302-9 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 131337052 | 131352061 | transcript | RAP2C | ... | ## | chrX | 134021661 | 134049287 | transcript | MOSPD1 | ... | ## | chrX | 152157367 | 152160757 | transcript | PNMA5 | ... | ## | chrX | 152661096 | 152666808 | transcript | PNMA6E | ... | ## +--------------+-----------+-----------+------------+--------------+-------+ ## Stranded PyRanges object has 500 rows and 9 columns from 30 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 4 hidden columns: transcript_id, Strand, exon_number, transcript_name print(gr.features.tes()) # default is by gene ## +--------------+-----------+-----------+------------+--------------+-------+ ## | Chromosome | Start | End | Feature | gene_id | +4 | ## | (category) | (int32) | (int32) | (object) | (object) | ... | ## |--------------+-----------+-----------+------------+--------------+-------| ## | chr1 | 14361 | 14362 | tes | LOC102725121 | ... | ## | chr1 | 14408 | 14409 | tes | DDX11L1 | ... | ## | chr1 | 30502 | 30503 | tes | MIR1302-2 | ... | ## | chr1 | 30502 | 30503 | tes | MIR1302-9 | ... | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 131337052 | 131337053 | tes | RAP2C | ... | ## | chrX | 134021661 | 134021662 | tes | MOSPD1 | ... | ## | chrX | 152157367 | 152157368 | tes | PNMA5 | ... | ## | chrX | 152661096 | 152661097 | tes | PNMA6E | ... | ## +--------------+-----------+-----------+------------+--------------+-------+ ## Stranded PyRanges object has 500 rows and 9 columns from 30 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. ## 4 hidden columns: transcript_id, Strand, exon_number, transcript_name tile_genome splits a PyRanges of chromosome sizes into a tiled genome. import pyranges as pr cs = pr.data.chromsizes() print(cs) # can also do # pip install pyranges_db as db # cs = db.ucsc.chromsizes(&quot;hg19&quot;) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 249250621 | ## | chr2 | 0 | 243199373 | ## | chr3 | 0 | 198022430 | ## | chr4 | 0 | 191154276 | ## | ... | ... | ... | ## | chr22 | 0 | 51304566 | ## | chrM | 0 | 16571 | ## | chrX | 0 | 155270560 | ## | chrY | 0 | 59373566 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 25 rows and 3 columns from 25 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. tile_size = int(1e6) print(pr.gf.tile_genome(cs, tile_size, tile_last=False)) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 1000000 | ## | chr1 | 1000000 | 2000000 | ## | chr1 | 2000000 | 3000000 | ## | chr1 | 3000000 | 4000000 | ## | ... | ... | ... | ## | chrY | 56000000 | 57000000 | ## | chrY | 57000000 | 58000000 | ## | chrY | 58000000 | 59000000 | ## | chrY | 59000000 | 59373566 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 3,114 rows and 3 columns from 25 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. print(pr.gf.tile_genome(cs, tile_size, tile_last=True)) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 1000000 | ## | chr1 | 1000000 | 2000000 | ## | chr1 | 2000000 | 3000000 | ## | chr1 | 3000000 | 4000000 | ## | ... | ... | ... | ## | chrY | 56000000 | 57000000 | ## | chrY | 57000000 | 58000000 | ## | chrY | 58000000 | 59000000 | ## | chrY | 59000000 | 60000000 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 3,114 rows and 3 columns from 25 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. genome_bounds removes all intervals in the PyRanges which are outside the genome bounds. If the flag clip is used, the parts of the intervals which are inside the boundaries are kept. import pyranges as pr cs = pr.data.chromsizes() gr = pr.data.chipseq() print(cs) # can also do # pip install pyranges_db as db # cs = db.ucsc.chromsizes(&quot;hg19&quot;) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 249250621 | ## | chr2 | 0 | 243199373 | ## | chr3 | 0 | 198022430 | ## | chr4 | 0 | 191154276 | ## | ... | ... | ... | ## | chr22 | 0 | 51304566 | ## | chrM | 0 | 16571 | ## | chrX | 0 | 155270560 | ## | chrY | 0 | 59373566 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 25 rows and 3 columns from 25 chromosomes. ## For printing, the PyRanges was sorted on Chromosome. print(pr.gf.genome_bounds(gr, cs, clip=True)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. print(pr.gf.genome_bounds(gr, cs)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 9,979 rows and 6 columns from 24 chromosomes. ## For printing, the PyRanges was sorted on Chromosome and Strand. random creates a random PyRanges from the PyRanges of chromosome sizes given: pr.random(n=1000, length=100, chromsizes=None, strand=True) if no chromsize is given, hg19 is used (from pr.data.chromsizes). This is the same behavior as bedtools intersect.↩︎ This is the same behavior as Bioconductor GenomicRanges intersect.↩︎ "]
]
